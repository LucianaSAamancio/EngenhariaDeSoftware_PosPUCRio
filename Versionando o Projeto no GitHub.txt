PARA SUBIR OS ARQUIVOS PARA O GITHUB PELA PRIMEIRA VEZ

1 - Abrir o tgiterminal do Gitbash e digitar e entrar na pasta que deseja versionar o código 
$ cd C:\SistemaDeJogoXadrez_CursoUdemyJavaCompleto

2 - Iniciar um repositório git na pasta do projeto 
$ git init

3 - Associar o Projeto Local com o repositório remoto do GitHub
$ git remote add origin https://github.com/LucianaAmancio/SistemaDeJogoXadrez_CursoUdemyJavaCompleto.git

$ git remote add origin https://github.com/LucianaSAamancio/Automatizado_SeleniumJava.git

4 - Atualizar o projeto local em relação ao projeto remoto
$ git branch -m main
$ git pull origin main

5 - Verificar o status
$ git status

6 - Confirmar se o usuário está correto
$ git config --list

Validar se está assim:
user.email= (do GitHub)
user.name= (nome do usuário no github)

7 - Comandos para criar os arquivos locais no repositório do GitHub
$ git add .
$ git commit -m "Projeto criado."

8 - Subir para o repositório os arquivos
git push -u origin main

9 - Será aberto uma nova tela solicitando aprovação e autenticação. Validar via browser aceitando.

------------------------------------------------------------------------
 MODELO GENÉRICO -> PARA SUBIR APÓS A PRIMEIRA CONEXÃO COM O GITHUB

1 - Abrir o terminal do Gitbash e digitar e entrar na pasta que deseja versionar o código 
$ cd C:\SistemaDeJogoXadrez_CursoUdemyJavaCompleto

2 - Verificar o status
$ git status

3 - Comandos para criar os arquivos locais no repositório do GitHub
$ git add .
$ git commit -m " "

4 - Subir para o repositório os arquivos
$ git push 
------------------------------------------------------------------------
RODAR O PROJETO PELA PASTA BIN A PARTIR DAS ALTERAÇÕES REALIZADAS APÓS SUBIR OS ARQUIVOS PARA O GIT PELA PRIMEIRA VEZ
 
1 - Abrir o tgiterminal do Gitbash e digitar e entrar na pasta que deseja versionar o código 
$ cd C:\EngenhariaDeSoftware_PosPUCRio

2 - Atualizar o projeto local em relação ao projeto remoto
$ git branch -m main
$ git pull origin main

3 - Comandos para criar os arquivos locais no repositório do GitHub
$ git add .
$ git commit -m "Criação do tabuleiro e da página de recordes."

4 - Subir para o repositório os arquivos
$ git push
-----------------------------------------------------------------------------------
Aprendi que um bom histórico de commits facilita, logo sigo um padrão que ajuda a manter tudo organizado e claro. Vi esse padrão em um post no LinkedIn que citava o blog da Rocketseat. 

Estes são alguns tipos e quando usá-los:
✅ feat→ Quando adicionamos um novo recurso ao código. 
🐛 fix→ Para corrigir um bug. 
🎨 style→ Alterações que não afetam a lógica do código (formatação, espaços, etc.). 
🔄 refactor→ Refatoração sem mudança de comportamento ou correção de bug. 
🧪 test→ Adicionando ou corrigindo testes. 
📄 docs→ Mudanças apenas na documentação. 
🛠 chore→ Atualizações de ferramentas, dependências ou scripts auxiliares. 
⚡ perf→ Melhorias de desempenho. 
🏗 build→ Mudanças no sistema de build ou dependências. 
🔧 ci→ Alterações em scripts de integração contínua.