INTRODUÇÃO A BANCO DE DADOS

Passos realizados para Resolução do Exercício Plataforma de aluguel de imóvel por temporada


1 - Utilizando o brModelo foi feita a criação do DER referente a história da Plataforma de aluguel de imóvel por temporada;

2 - Utilizando uma planilha do GoogleDrive foi feita a criação do Dicionário de dados baseado na história da Plataforma de aluguel de imóvel por temporada;

3 - Utilizando o brModelo: Diagrama -> Comandos -> Converter para lógico. Foi feita a criação do Modelo Lógico a partir do DER criado no passo 1 dessa lista; 

4 -  Utilizando o brModelo: Diagrama -> Comandos -> Editar tipos. Foi feita classificação dos Tipos de campos conforme definição documentada na coluna "Domínio de valores válidos" do Dicionário de Dados do DER e Modelo Lógico criado para Plataforma de aluguel de imóvel por temporada;

5 - Utilizando o brModelo: Diagrama -> Comandos -> Converter para físico. Foi feita a criação do Modelo Físico referente ao Modelo Lógico criado no passo 3 dessa lista. 

6 - Utilizando o Notepad++ foram feitos os ajustes necessários para as chaves estrangeiras no script gerado para o Modelo Físico no brModelo. 

7 - Se souber incluir o tamanho necessário para os tipos Int e Varchar.

7 - No prompt de comando na pasta do sqlite3 foram executados os comandos abaixo:

/* Para criar o banco de dados */
sqlite3 PosGraducaoEGSPucRio.db

/* Comando para criar as tabelas no banco de dados criado no sqlite3 */
.read IntroducaoBancoDeDados_Aula02_ExercicioModeloFisico_V05.sql

/* Comando para v.schema Imovelerificar se a Tabela foi criada */
.schema Proprietario
.schema Imovel
.schema Locatario
.schema Endereco
.schema CEP_Correios
.schema Avaliacao
.schema Aluga
.schema Observacao

8 - Fazer o exercício da Técnica Aplicada da Aula 3 Carga e alteração de dados e criação de novos objetos em esquemas em banco de dados relacionais: atualizando as instâncias e o esquema

A) comandos de manipulação de dados nas tabelas usando as instruções DML: INSERT, UPDATE e DELETE;
B) comandos SELECT para verificar os dados das tabelas antes e depois da manipulação;

Itens 8-A e 8-B registrados no arquivo: IntroducaoBancoDeDados_Aula03_DML_INSERT_UPDATE_DELETE_SELECT.sql

C) gerar um arquivo CSV com, pelo menos, 20 linhas e carregá-lo em uma das tabelas do banco de dados de sua escolha.

	* Colocar o arquivo csv criado na pasta do sqlite3.  
	* Abrir o pront de comando na pasta do sqlite3.
	* Digitar os comandos abaixo no prompt de comando:

		.schema Proprietario 
		.separator ','
		.import Proprietario.csv Proprietario
		
	*Comandos utilizados para validar a importação dos dados do arquivo para tabela
		select count(CPF_Proprietario) from Proprietario;
		select * from Proprietario;

D) Além disso, você deverá criar uma visão para dados pessoais do locatário e outra para dados pessoais do proprietário, formatando a data de nascimento com o padrão DD/MM/YYYY, bem como um índice para o atributo situação na tabela que representa o relacionamento de alugar.

CREATE VIEW DADOS_PESSOAIS_LOCATARIO AS 
SELECT CPF_Locatario, Nome_completo,  E_mail, strftime('%d/%m/%Y', Data_de_nascimento) AS DataDeNascimento_formatada 
FROM Locatario;

SELECT * FROM DADOS_PESSOAIS_LOCATARIO;

CREATE VIEW DADOS_PESSOAIS_PROPRIETARIO3 AS
SELECT CPF_Proprietario, Nome_completo,  E_mail, strftime('%d/%m/%Y', Data_de_nascimento) AS DataDeNascimento_formatada  
from Proprietario;

SELECT * FROM DADOS_PESSOAIS_PROPRIETARIO;

CREATE INDEX IDX_SITUACAO_ALUGA  ON Aluga(Situacao);

-------------------------------------------------------------------------------

CRIACAO DE DADOS NAS OUTRAS TABELAS UTILIZANO O IMPORT

-->
.schema Imovel
.separator ','
.import Imovel.csv Imovel

select count(ID_Imovel) from Imovel;
select * from Imovel;

-->
.schema Locatario
.separator ','
.import Locatario.csv Locatario

select count(CPF_Locatario) from Locatario;
select * from Locatario;

-->
.schema Endereco
.separator ','
.import Endereco.csv Endereco

select count(Endereco_PK) from Endereco;
select * from Endereco;

-->
.schema CEP_Correios
.separator ','
.import CEP_Correios.csv CEP_Correios

select count(CEP) from CEP_Correios;
select * from CEP_Correios;

-->
.schema Avaliacao
.separator ','
.import Avaliacao.csv Avaliacao

select count(Avaliacao_PK) from Avaliacao;
select * from Avaliacao;

-->
.schema Aluga
.separator ','
.import Aluga.csv Aluga

select count(ID_Imovel) from Aluga;
select * from Aluga;

-->
.schema Observacao
.separator ','
.import Observacao.csv Observacao

select count() from Observacao;
select * from Observacao;


-------------------------------------------------------------------------------

---> Ajuda da professora Veronica

Neste link achei uma explicação bem detalhada de como o sqlite trata informações de data. 

https://internotes.net/sqlite-dates

Eu fiz uma adaptação dos testes que o autor apresenta, veja qual caso se aplica a forma como vc inseriu os dados: 

CREATE TABLE dates (
    iso TEXT,
    julian REAL,
    epoch INT, 
    data DATE
);

insert into dates values ('1990-01-01', 2447892.500000, 631152000000, '1990/01/01');

select strftime('%d/%m/%Y',iso), strftime('%d/%m/%Y',julian), strftime('%d/%m/%Y',epoch), strftime('%d/%m/%Y', data) from dates;

select (SUBSTR(CAST(DATA AS TEXT),9,2)  '/'  SUBSTR(CAST(DATA AS TEXT),6,2)  '/'  SUBSTR(CAST(DATA AS TEXT),1,4)) AS data_formatada 
from dates;

-------------------------------------------------------------------------------

---> SOLUÇÃO PARA O PROBLEMA COM A FORMATAÇÃO DO CAMPO Data_de_nascimento NA VIEW 

Problema não estava conseguindo exibir o campo Data_de_nascimento formatado com o strftime porque o campo criado na view estava vindo como vazia, pois a coluna Data_de_nascimento já se encontrava no formato "dd/mm/aaaa" na tabela. 
Após identificar esse problema e alterar a data para o formato aaaa-mm-dd a view realizou a formatação do campo e exibiu a data formata na coluna  DataDeNascimento_formatada. 








